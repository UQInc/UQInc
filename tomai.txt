AI USE by Thomas McPherson

1.
## ME 
I want the descriotion to go over multiple lines 
inside the gui. This is a big line of code to check. I want to split into this for example.
The problem is that the string getting passed in, comes from a vector and cant really be altered.
IS there any way to make more than one line?

## ChatGPT Response
To split the text into multiple lines within your GUI, you can calculate where to insert line breaks based on the character limit for each line. Since the string is coming from a vector and you can't alter the original string directly, you can handle the splitting inside the buymenu_description function.

Here's an example of how you can modify the buymenu_description function to achieve this:

rust
Copy code
pub fn buymenu_description(font: Option<&Font>, font_size: u16, text: String, box_number: usize) {
    // Define the coordinates for the text box
    let box_coords: [[f32; 2]; 5] = [
        [0.35 , 0.59],
        [0.35 , 0.675],
        [0.35 , 0.76],
        [0.35 , 0.845],
        [0.35 , 0.93],
    ];
    
    // Set the maximum number of characters per line
    let char_limit = 43;
    
    // Split the text into lines based on the character limit
    let mut lines = Vec::new();
    let mut current_line = String::new();
    
    for word in text.split_whitespace() {
        // Check if adding the next word exceeds the character limit
        if current_line.len() + word.len() + 1 > char_limit {
            lines.push(current_line);
            current_line = String::new();
        }
        
        if !current_line.is_empty() {
            current_line.push(' ');
        }
        current_line.push_str(word);
    }
    
    // Push the last line if it's not empty
    if !current_line.is_empty() {
        lines.push(current_line);
    }
    
    // Draw each line of text at the appropriate position
    let x_pos = screen_width() * box_coords[box_number][0];
    let mut y_pos = screen_height() * box_coords[box_number][1];

    for line in lines {
        draw_text_ex(
            &line,
            x_pos,
            y_pos,
            TextParams {
                font_size: font_size,
                font_scale: 0.3,        // Slight horizontal scale to make the text wider
                font_scale_aspect: 5.0, // Match the font scale to maintain proportions
                color: BLACK,
                font: font,
                ..Default::default()
            },
        );
        // Adjust the y-position for the next line
        y_pos += font_size as f32 * 1.2; // Adjust this factor to control line spacing
    }
}
Explanation:
Character Limit: A character limit (char_limit) is set to determine when to split the text into a new line.
Splitting Text: The function iterates over the words in the text string and assembles them into lines. It starts a new line when the character limit is exceeded.
Drawing Text: The function then draws each line of text in succession, adjusting the y-position for each subsequent line.
This approach ensures that long text will automatically be split across multiple lines, without modifying the original text passed to the function.


2. ## ME
is it possible to make this faster by using a loop? for code efficiency?
async fn load_textures() -> HashMap<String, Texture2D> {
    let mut textures = HashMap::new();
    textures.insert("Test1".to_string(), load_texture("media/images/BACKGROUND.png").await.unwrap());
    // Loading textures of all buildings
    textures.insert("Forgan Smith".to_string(), load_texture("media/images/FORGANSMITH.png").await.unwrap());
    textures.insert("Goddard Building".to_string(), load_texture("media/images/FORGANSMITH.png").await.unwrap());
    textures.insert("Parnell Building".to_string(), load_texture("media/images/parnell.png").await.unwrap());
    textures.insert("Richards Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    textures.insert("Steele Building".to_string(), load_texture("media/images/STEELEBUILDING.png").await.unwrap());
    textures.insert("EZ Mart".to_string(), load_texture("media/images/ezmart.png").await.unwrap());
    textures.insert("Central Library".to_string(), load_texture("media/images/CENTRALLIBRARY.png").await.unwrap());
    // NOT BEEN ADDED.
    textures.insert("Prentice Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    textures.insert("Learning Innovation Building".to_string(), load_texture("media/images/LEARNINGINNOVATION.png").await.unwrap());
    textures.insert("John Hines Building".to_string(), load_texture("media/images/JOHNHINES.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("UQ Union and Food Court".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("McElwain Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Chamberlain Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    textures.insert("Art Museum".to_string(), load_texture("media/images/ARTMUSEUM.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Otto Hirschfeld Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Molecular BioScience Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    textures.insert("JD Story Administration Building".to_string(), load_texture("media/images/JDSTORY.png").await.unwrap());
    textures.insert("Hartley Teak".to_string(), load_texture("media/images/HARTLEY_TEAK.png").await.unwrap());
    textures.insert("Biological Science Library".to_string(), load_texture("media/images/BIO_SCIENCE_LIBRARY.png").await.unwrap());
    textures.insert("Brain Institution".to_string(), load_texture("media/images/BRAININSTITUTE.png").await.unwrap());
    textures.insert("Center for Water and Environmental Biotechnology".to_string(), load_texture("media/images/WATERANDENVIRO.png").await.unwrap());
    textures.insert("Chemistry Building".to_string(), load_texture("media/images/CHEM.png").await.unwrap());
    textures.insert("Mansergh Shaw Building".to_string(), load_texture("media/images/MANSERGHSHAW.png").await.unwrap());
    textures.insert("Hawken Engineering".to_string(), load_texture("media/images/HAWKEN.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Don Nicklin Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    textures.insert("Bioengineering Institute".to_string(), load_texture("media/images/BIOENG.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Advanced Imaging Centre".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    textures.insert("General Purpose South".to_string(), load_texture("media/images/GPSOUTH.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("General Purpose North".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("UQ Business School".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED 
    textures.insert("Zelman Cowen Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED 
    textures.insert("Building 41".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("23, 38, 31A".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Cumbrae-Stewart Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("O'Connell Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Gordon Greenwood Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("UQ Centre" .to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Building 33".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Schonell Theatre".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Eleanor Schonell Bridge".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Psychology Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Kathleen Lambourne Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Advanced Engineering".to_string(), load_texture("media/images/Richards.png").await.unwrap());
    // NOT BEEN ADDED
    textures.insert("Andrew N. Liveris Building".to_string(), load_texture("media/images/Richards.png").await.unwrap());

    textures
}

# ChatGPT Response
Yes, you can make this more efficient and cleaner by using a loop. You can store the building names and their corresponding image paths in an array of tuples and then iterate through the array to insert them into the HashMap. Hereâ€™s how you could do it:

rust
Copy code
async fn load_textures() -> HashMap<String, Texture2D> {
    let buildings = [
        ("Test1", "media/images/BACKGROUND.png"),
        ("Forgan Smith", "media/images/FORGANSMITH.png"),
        ("Goddard Building", "media/images/FORGANSMITH.png"),
        ("Parnell Building", "media/images/parnell.png"),
        ("Richards Building", "media/images/Richards.png"),
        ("Steele Building", "media/images/STEELEBUILDING.png"),
        ("EZ Mart", "media/images/ezmart.png"),
        ("Central Library", "media/images/CENTRALLIBRARY.png"),
        ("Prentice Building", "media/images/Richards.png"),
        ("Learning Innovation Building", "media/images/LEARNINGINNOVATION.png"),
        ("John Hines Building", "media/images/JOHNHINES.png"),
        ("UQ Union and Food Court", "media/images/Richards.png"),
        ("McElwain Building", "media/images/Richards.png"),
        ("Chamberlain Building", "media/images/Richards.png"),
        ("Art Museum", "media/images/ARTMUSEUM.png"),
        ("Otto Hirschfeld Building", "media/images/Richards.png"),
        ("Molecular BioScience Building", "media/images/Richards.png"),
        ("JD Story Administration Building", "media/images/JDSTORY.png"),
        ("Hartley Teak", "media/images/HARTLEY_TEAK.png"),
        ("Biological Science Library", "media/images/BIO_SCIENCE_LIBRARY.png"),
        ("Brain Institution", "media/images/BRAININSTITUTE.png"),
        ("Center for Water and Environmental Biotechnology", "media/images/WATERANDENVIRO.png"),
        ("Chemistry Building", "media/images/CHEM.png"),
        ("Mansergh Shaw Building", "media/images/MANSERGHSHAW.png"),
        ("Hawken Engineering", "media/images/HAWKEN.png"),
        ("Don Nicklin Building", "media/images/Richards.png"),
        ("Bioengineering Institute", "media/images/BIOENG.png"),
        ("Advanced Imaging Centre", "media/images/Richards.png"),
        ("General Purpose South", "media/images/GPSOUTH.png"),
        ("General Purpose North", "media/images/Richards.png"),
        ("UQ Business School", "media/images/Richards.png"),
        ("Zelman Cowen Building", "media/images/Richards.png"),
        ("Building 41", "media/images/Richards.png"),
        ("23, 38, 31A", "media/images/Richards.png"),
        ("Cumbrae-Stewart Building", "media/images/Richards.png"),
        ("O'Connell Building", "media/images/Richards.png"),
        ("Gordon Greenwood Building", "media/images/Richards.png"),
        ("UQ Centre", "media/images/Richards.png"),
        ("Building 33", "media/images/Richards.png"),
        ("Schonell Theatre", "media/images/Richards.png"),
        ("Eleanor Schonell Bridge", "media/images/Richards.png"),
        ("Psychology Building", "media/images/Richards.png"),
        ("Kathleen Lambourne Building", "media/images/Richards.png"),
        ("Advanced Engineering", "media/images/Richards.png"),
        ("Andrew N. Liveris Building", "media/images/Richards.png"),
    ];

    let mut textures = HashMap::new();

    for (name, path) in &buildings {
        textures.insert(name.to_string(), load_texture(path).await.unwrap());
    }

    textures
}
This approach significantly reduces code duplication and makes it easier to maintain and update the list of buildings and their corresponding textures.


3. 
# ME
create a new colour like GREEN?
draw_rectangle(-1.0, 0.0, 2.0, 0.1, GREEN);

# ChatGPT Response

To create a new color in the Macroquad framework similar to GREEN, you need to define it using Color and then use it with functions like draw_rectangle. For instance, if you want to create a custom green color, you can do something like this:

rust
Copy code
use macroquad::prelude::*;

// Define a custom color
const CUSTOM_GREEN: Color = Color {
    r: 0.0,
    g: 1.0,
    b: 0.0,
    a: 1.0,
};

#[macroquad::main("Custom Color Example")]
async fn main() {
    loop {
        clear_background(WHITE);

        // Use the custom green color
        draw_rectangle(-1.0, 0.0, 2.0, 0.1, CUSTOM_GREEN);

        next_frame().await;
    }
}
In this example, CUSTOM_GREEN is a Color struct where r, g, b, and a are floats representing the red, green, blue, and alpha (transparency) channels, respectively. Values are between 0.0 and 1.0. You can adjust these values to create any shade of green you like.


4. #ME 
can you create a label please, using ui:label
widgets::label::new(hash!(), vec2(400., 200.), vec2(320., 400.))
            .titlebar(true)
            .ui(&mut *root_ui(), |ui| {
                for i in 0..30 {
                    Group::new(hash!("statistics", i), Vec2::new(300., 80.)).ui(ui, |ui| {
                        ui.label(Vec2::new(10., 10.), &format!("Students: {}", i));
                        ui.label(Vec2::new(260., 40.), "Currency");
                    });
                }
            });

# Response
Sure! Here's how you can create a label using ui.label in your Macroquad application. The code snippet you've provided is already well-structured, but I'll explain it in detail:

rust
Copy code
use macroquad::prelude::*;
use macroquad::ui::{hash, root_ui, widgets, Group};

#[macroquad::main("Label Example")]
async fn main() {
    loop {
        // Creating a label with a title bar
        widgets::Window::new(hash!(), vec2(400., 200.), vec2(320., 400.))
            .titlebar(true)
            .ui(&mut *root_ui(), |ui| {
                for i in 0..30 {
                    Group::new(hash!("statistics", i), Vec2::new(300., 80.)).ui(ui, |ui| {
                        ui.label(Vec2::new(10., 10.), &format!("Students: {}", i));
                        ui.label(Vec2::new(260., 40.), "Currency");
                    });
                }
            });

        // Drawing the GUI
        next_frame().await
    }
}
Explanation:
Label Creation: ui.label(Vec2::new(x, y), "text") is used to create a label with specified coordinates.
Loop: The loop iterates 30 times, generating groups that contain two labels. The Group::new creates a new group of widgets with the specified size.
Title Bar: titlebar(true) adds a title bar to the window.
Coordinates: The labels are positioned at (10, 10) and (260, 40) within each group.